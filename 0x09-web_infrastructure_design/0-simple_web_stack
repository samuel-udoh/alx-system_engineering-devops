https://imgur.com/a/GNWfkNq

A user enters www.foobar.com in their browser. The browser resolves this to 8.8.8.8 via DNS (using an A record). It then opens an HTTPS connection to 8.8.8.8:443. Nginx (the web server) accepts the request, handles TLS decryption, and either:

Serves static files directly (e.g., index.html), OR
Proxies dynamic requests (e.g., /api/login) to the application server (e.g., Python/Node.js).
The application server executes business logic, connects to MySQL over localhost (same machine), and returns data to Nginx. Nginx then sends the final response to the user.

This setup has critical flaws: 

SPOF: One server hosts all components (Nginx, app, MySQL). A single crash kills everything.
Downtime: Restarting any service (Nginx/app/MySQL) interrupts live traffic.
No scalability: Traffic spikes overload CPU/RAM â†’ errors (not just "slowness"). MySQL contention is a common bottleneck.